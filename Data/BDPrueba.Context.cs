//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoCCSS.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CCSSDatosEntities : DbContext
    {
        public CCSSDatosEntities()
            : base("name=CCSSDatosEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Expedientes> Expedientes { get; set; }
        public virtual DbSet<Pacientes> Pacientes { get; set; }
        public virtual DbSet<PersonalMedico> PersonalMedico { get; set; }
    
        public virtual int ActualizarMedico(Nullable<int> iD_Medico, string nombre, string apellido, string especialidad, string usuario, string contraseña)
        {
            var iD_MedicoParameter = iD_Medico.HasValue ?
                new ObjectParameter("ID_Medico", iD_Medico) :
                new ObjectParameter("ID_Medico", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var especialidadParameter = especialidad != null ?
                new ObjectParameter("Especialidad", especialidad) :
                new ObjectParameter("Especialidad", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarMedico", iD_MedicoParameter, nombreParameter, apellidoParameter, especialidadParameter, usuarioParameter, contraseñaParameter);
        }
    
        public virtual int ActualizarPaciente(Nullable<int> iD_Paciente, string nombre, string apellido, Nullable<System.DateTime> fecha_Nacimiento, string datos_Contacto)
        {
            var iD_PacienteParameter = iD_Paciente.HasValue ?
                new ObjectParameter("ID_Paciente", iD_Paciente) :
                new ObjectParameter("ID_Paciente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fecha_NacimientoParameter = fecha_Nacimiento.HasValue ?
                new ObjectParameter("Fecha_Nacimiento", fecha_Nacimiento) :
                new ObjectParameter("Fecha_Nacimiento", typeof(System.DateTime));
    
            var datos_ContactoParameter = datos_Contacto != null ?
                new ObjectParameter("Datos_Contacto", datos_Contacto) :
                new ObjectParameter("Datos_Contacto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarPaciente", iD_PacienteParameter, nombreParameter, apellidoParameter, fecha_NacimientoParameter, datos_ContactoParameter);
        }
    
        public virtual int EliminarExpediente(Nullable<int> iD_Expediente)
        {
            var iD_ExpedienteParameter = iD_Expediente.HasValue ?
                new ObjectParameter("ID_Expediente", iD_Expediente) :
                new ObjectParameter("ID_Expediente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarExpediente", iD_ExpedienteParameter);
        }
    
        public virtual int EliminarMedico(Nullable<int> iD_Medico)
        {
            var iD_MedicoParameter = iD_Medico.HasValue ?
                new ObjectParameter("ID_Medico", iD_Medico) :
                new ObjectParameter("ID_Medico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarMedico", iD_MedicoParameter);
        }
    
        public virtual int EliminarPaciente(Nullable<int> iD_Paciente)
        {
            var iD_PacienteParameter = iD_Paciente.HasValue ?
                new ObjectParameter("ID_Paciente", iD_Paciente) :
                new ObjectParameter("ID_Paciente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarPaciente", iD_PacienteParameter);
        }
    
        public virtual int InsertarExpediente(Nullable<int> iD_Paciente, Nullable<int> iD_Medico, string diagnostico, string tratamiento, string resultados_Pruebas, Nullable<System.DateTime> fecha_Creacion)
        {
            var iD_PacienteParameter = iD_Paciente.HasValue ?
                new ObjectParameter("ID_Paciente", iD_Paciente) :
                new ObjectParameter("ID_Paciente", typeof(int));
    
            var iD_MedicoParameter = iD_Medico.HasValue ?
                new ObjectParameter("ID_Medico", iD_Medico) :
                new ObjectParameter("ID_Medico", typeof(int));
    
            var diagnosticoParameter = diagnostico != null ?
                new ObjectParameter("Diagnostico", diagnostico) :
                new ObjectParameter("Diagnostico", typeof(string));
    
            var tratamientoParameter = tratamiento != null ?
                new ObjectParameter("Tratamiento", tratamiento) :
                new ObjectParameter("Tratamiento", typeof(string));
    
            var resultados_PruebasParameter = resultados_Pruebas != null ?
                new ObjectParameter("Resultados_Pruebas", resultados_Pruebas) :
                new ObjectParameter("Resultados_Pruebas", typeof(string));
    
            var fecha_CreacionParameter = fecha_Creacion.HasValue ?
                new ObjectParameter("Fecha_Creacion", fecha_Creacion) :
                new ObjectParameter("Fecha_Creacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarExpediente", iD_PacienteParameter, iD_MedicoParameter, diagnosticoParameter, tratamientoParameter, resultados_PruebasParameter, fecha_CreacionParameter);
        }
    
        public virtual int InsertarMedico(string nombre, string apellido, string especialidad, string usuario, string contraseña)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var especialidadParameter = especialidad != null ?
                new ObjectParameter("Especialidad", especialidad) :
                new ObjectParameter("Especialidad", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarMedico", nombreParameter, apellidoParameter, especialidadParameter, usuarioParameter, contraseñaParameter);
        }
    
        public virtual int InsertarPaciente(string nombre, string apellido, Nullable<System.DateTime> fecha_Nacimiento, string datos_Contacto)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fecha_NacimientoParameter = fecha_Nacimiento.HasValue ?
                new ObjectParameter("Fecha_Nacimiento", fecha_Nacimiento) :
                new ObjectParameter("Fecha_Nacimiento", typeof(System.DateTime));
    
            var datos_ContactoParameter = datos_Contacto != null ?
                new ObjectParameter("Datos_Contacto", datos_Contacto) :
                new ObjectParameter("Datos_Contacto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarPaciente", nombreParameter, apellidoParameter, fecha_NacimientoParameter, datos_ContactoParameter);
        }
    
        public virtual ObjectResult<ObtenerExpedientesPorMedico_Result> ObtenerExpedientesPorMedico(Nullable<int> iD_Medico)
        {
            var iD_MedicoParameter = iD_Medico.HasValue ?
                new ObjectParameter("ID_Medico", iD_Medico) :
                new ObjectParameter("ID_Medico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerExpedientesPorMedico_Result>("ObtenerExpedientesPorMedico", iD_MedicoParameter);
        }
    
        public virtual ObjectResult<ObtenerExpedientesPorPaciente_Result> ObtenerExpedientesPorPaciente(Nullable<int> iD_Paciente)
        {
            var iD_PacienteParameter = iD_Paciente.HasValue ?
                new ObjectParameter("ID_Paciente", iD_Paciente) :
                new ObjectParameter("ID_Paciente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerExpedientesPorPaciente_Result>("ObtenerExpedientesPorPaciente", iD_PacienteParameter);
        }
    }
}
